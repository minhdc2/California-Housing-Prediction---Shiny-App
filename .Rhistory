}
shapiro_test(group.grouping, value)
par(mfrow = c(1, 4))
for (group in c("control", "low", "medium", "high")) {
boxplot(long.table[long.table$group == group,]$value, main = group)
}
levene_test(long.table, value ~ factor(group))
levene_test(long.table[long.table$group != "high",], value ~ factor(group))
our_model <- lm(value ~ group, data = long.table[long.table$group != "high",])
summary(aov(our_model))
TukeyHSD(aov(lm(value ~ group, data = long.table[long.table$group != "high",])))
control <- long.table[long.table$group == "control",]$value
low <- long.table[long.table$group == "low",]$value
medium <- long.table[long.table$group == "medium",]$value
high <- long.table[long.table$group == "high",]$value
# Note: We set var.equal = FALSE because two variances are unequal
t.test(x = high, y = control,
alternative = "two.sided", mu = 0, var.equal = FALSE)
# Note: We set var.equal = FALSE because two variances are unequal
t.test(x = high, y = low,
alternative = "two.sided", mu = 0, var.equal = FALSE)
# Note: We set var.equal = FALSE because two variances are unequal
t.test(x = high, y = medium,
alternative = "two.sided", mu = 0, var.equal = FALSE)
# setup
groundwater <- read.csv("groundwater.csv")
cor.test(groundwater$pH, groundwater$Bicarbonate)
model <- lm(pH ~ Bicarbonate, data = groundwater)
summary(model)
par(mfrow = c(1, 2))
plot(groundwater$Bicarbonate, groundwater$pH)
plot(model, c(1))
par(mfrow = c(1, 2))
hist(model$residuals)
plot(model, c(2))
shapiro.test(model$residuals)
conf.int <- predict(model, newdata = groundwater, interval = "confidence")
pred.int <- predict(model, newdata = groundwater, interval = "prediction")
colnames(conf.int)[2:3] <- c("conf_lwr", "conf_upr")
colnames(pred.int)[2:3] <- c("pred_lwr", "pred_upr")
groundwater.fitted <- cbind(groundwater, conf.int,
pred.int[, c("pred_lwr", "pred_upr")]) %>%
arrange(Bicarbonate)
head(groundwater.fitted)
ggplot(data = groundwater.fitted, aes(x = Bicarbonate)) +
geom_point(aes(y = pH), size = 3, color = "blue", alpha = 0.5) +
geom_line(aes(y = fit, color = "fit"), linewidth = 1.5, alpha = 0.7) +
geom_line(aes(y = conf_lwr, color = "confidence intervals"),
linewidth = 1.2, alpha = 0.4) +
geom_line(aes(y = conf_upr, color = "confidence intervals"),
linewidth = 1.2, alpha = 0.4) +
geom_line(aes(y = pred_lwr, color = "prediction intervals"),
linewidth = 1.2, alpha = 0.4) +
geom_line(aes(y = pred_upr, color = "prediction intervals"),
linewidth = 1.2, alpha = 0.4) +
scale_color_manual(values = c("purple", "red", "darkgreen")) +
ggtitle("Plot the data and regression line") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
legend.title = element_blank(),
legend.text=element_text(size=14, color = "black"),
legend.position="bottom",
plot.title = element_text(size = 18, face = "bold", color = "gray30"))
conf_level <- 0.95
slope <- model$coefficients["Bicarbonate"]
z_star <- qnorm((1-conf_level)/2, lower.tail = FALSE)
se <- summary(model)$coefficients[, 2]["Bicarbonate"]
conf_int <- slope + c(-1, 1) * z_star * se
names(conf_int) <- c("5%", "95%")
conf_int
nsim <- 20000
cor_sim <- numeric(nsim)
sim_dat <- groundwater # copy the data for our simulation
for (i in 1:nsim) {
sim_dat$Bicarbonate <- sample(groundwater$Bicarbonate,
size = nrow(groundwater), replace = FALSE)
cor_sim[i] <- cor(sim_dat$Bicarbonate, sim_dat$pH)
}
obs_cor <- cor(groundwater$Bicarbonate, groundwater$pH)
distance <- abs(obs_cor - 0)
pval <- (length(which(abs(cor_sim - 0) >= distance)) + 1) / (nsim + 1)
pval
nsim <- 10000
coef_sim <- numeric(nsim)
sim_dat <- groundwater # copy the data for our simulation
for (i in 1:nsim) {
sim_dat$Bicarbonate <- sample(groundwater$Bicarbonate,
size = nrow(groundwater), replace = FALSE)
model <- lm(pH ~ Bicarbonate, data = sim_dat)
coef_sim[i] <- model$coefficients["Bicarbonate"]
}
quantile(coef_sim, probs = c(0.025, 0.975))
# setup
antelope <- read.csv("antelope.csv")
model1 <- lm(fawn ~ adult + precip + severity, data = antelope)
par(mfrow = c(1, 3))
plot(model1, which = 1)
plot(model1, which = 2)
plot(model1, which = 5)
summary(model1)
model2 <- lm(fawn ~ adult + I(adult^2), data = antelope)
par(mfrow = c(1, 3))
plot(model2, which = 1)
plot(model2, which = 2)
plot(model2, which = 5)
summary(model2)
ggplot(data = antelope) +
geom_point(aes(x = adult, y = fawn),
color = "blue", size = 3, alpha = 0.5) +
geom_line(aes(x = adult, y = model2$fitted.values),
color = "red", size = 1.5, alpha = 0.7)
summary(model1)
summary(model2)
evaluation <- data.frame(
criteria <- c("Individual coefficient $p$-value(s)",
"Residual standard errors",
"Adjusted $R^2$",
"Overall model $p$-value",
"Principal of parsimony")
)
evaluation
evaluation <- data.frame(
criteria = c("Individual coefficient $p$-value(s)",
"Residual standard errors",
"Adjusted $R^2$",
"Overall model $p$-value",
"Principal of parsimony")
)
evaluation
evaluation <- data.frame(
criteria = c("Individual coefficient p-value(s)",
"Residual standard errors",
"Adjusted R-squared",
"Overall model p-value",
"Principal of parsimony")
)
evaluation
summary(model1)
summary(model2)
summary(model1)
evaluation <- data.frame(
criteria = c("Individual coefficient p-value(s)",
"Residual standard errors",
"Adjusted R-squared",
"Overall model p-value",
"Principal of parsimony"),
description = c("Both models have individual coefficient p-value(s) less than 0.05",
"Model 2 has lower residual standard error than Model 1 (0.064 < 0.121)",
"Model 2 has better adjusted R-squared than Model 1 (0.987 > 0.955)",
"Model 2 has lower overall model's p-value than Model 1 (0.000007 < 0.001)",
"Model 2 is simpler than Model 1 (1 variable vs 3 variables)"),
`Model 1` = c(1, 0, 0, 0, 0),
`Model 2` = c(1, 1, 1, 1, 1)
)
evaluation
evaluation <- data.frame(
criteria = c("Individual coefficient p-value(s)",
"Residual standard errors",
"Adjusted R-squared",
"Overall model p-value",
"Principal of parsimony"),
description = c("Both models have individual coefficient p-value(s) less than 0.05",
"Model 2 has lower residual standard error than Model 1 (0.064 < 0.121)",
"Model 2 has better adjusted R-squared than Model 1 (0.987 > 0.955)",
"Model 2 has lower overall model's p-value than Model 1 (0.000007 < 0.001)",
"Model 2 is simpler than Model 1 (1 variable vs 3 variables)"),
`Model 1` = c(1, 0, 0, 0, 0),
`Model 2` = c(1, 1, 1, 1, 1)
)
evaluation %>%
kbl(booktabs = T, linesep = "",
caption = "Data summary for numerical variables") %>%
kable_styling(latex_options = c("scale_down", "hold_position"), full_width = F) %>%
column_spec(2, width = "15em")
library(kableExtra)
evaluation <- data.frame(
criteria = c("Individual coefficient p-value(s)",
"Residual standard errors",
"Adjusted R-squared",
"Overall model p-value",
"Principal of parsimony"),
description = c("Both models have individual coefficient p-value(s) less than 0.05",
"Model 2 has lower residual standard error than Model 1 (0.064 < 0.121)",
"Model 2 has better adjusted R-squared than Model 1 (0.987 > 0.955)",
"Model 2 has lower overall model's p-value than Model 1 (0.000007 < 0.001)",
"Model 2 is simpler than Model 1 (1 variable vs 3 variables)"),
`Model 1` = c(1, 0, 0, 0, 0),
`Model 2` = c(1, 1, 1, 1, 1)
)
evaluation %>%
kbl(booktabs = T, linesep = "",
caption = "Data summary for numerical variables") %>%
kable_styling(latex_options = c("scale_down", "hold_position"), full_width = F) %>%
column_spec(2, width = "15em")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggarrange
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
?ggarrange
??ggarrange
shiny::runApp()
runApp()
shiny::runApp()
install.packages("vctrs")
install.packages("vctrs")
shiny::runApp()
shiny::runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot", height = "800px")),
tabPanel("Correlation", tableOutput("correlation")),
tabPanel("Summary", tableOutput("summary")),
tabPanel("Try", tableOutput("try"))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?grid.arrange
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1:3
x <- data.frame(col1 = c(1, 2), col2 = c(2, 3))
x
t(x)
colnames(t(x))
names(t(x))
ncol(t(x))
runApp()
runApp()
t(x)
rownames(t(x))
class(t(x))
as.data.frame(t(x))
names(as.data.frame(t(x)))
ncol(as.data.frame(t(x)))
runApp()
x
x[[1]]
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?xlab
runApp()
runApp()
runApp()
runApp()
source("D:/2. F/Canada/Study/AMOD-5250H-A-W01-2023GW-PTBO Data Analytics With R/Assessments/Term Project/utils/visualization.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
leisure <- read.csv("leisure.csv")
advertising <- read.csv("advertising.csv")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(stringr)
runApp()
str_trim(" abc ")
str_squish(" abc ")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?navbarPage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA)
runApp()
runApp()
